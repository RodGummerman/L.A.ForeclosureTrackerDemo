<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/17/2023 9:41:35 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="RODDEV"
  DTS:CreatorName="RODDEV\Rod"
  DTS:DTSID="{92E1819C-558B-44AE-A458-3E2669A26752}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5209.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="LoadRawData"
  DTS:PackageType="5"
  DTS:VersionBuild="21"
  DTS:VersionGUID="{508B9D8B-8232-453F-9D1F-E036AFED0622}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CFA6E9AC-CE34-4C67-A38A-63C0FA784F6E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RawDataFilePath">
      <DTS:VariableValue
        DTS:DataType="8">D:\L.A.ForeclosureTrackerDemo\RawData</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Load Raw Data"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{7A48634A-DEEF-41B2-A73B-AC676A9AFA80}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Raw Data"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_07e8c996ba96416f91b2b304afb84497"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::RawDataFilePath">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_07e8c996ba96416f91b2b304afb84497.Properties.Settings.get_Default():ST_07e8c996ba96416f91b2b304afb84497.Properties.Sett" +
    "ings")]

namespace ST_07e8c996ba96416f91b2b304afb84497.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Namespaces
using Microsoft.SqlServer.Dts.Runtime;
using System;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;
#endregion

namespace ST_07e8c996ba96416f91b2b304afb84497
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        private enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

        private string sql = string.Empty;
        private SqlConnection conn = new SqlConnection();
        private SqlCommand sqlCommand;

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// </summary>
        public void Main()
		{
            try
            {
                Int32 cntr = 0;
                string dataFilePath = Dts.Variables["User::RawDataFilepath"].Value.ToString();
                string[] dataFiles = Directory.GetFiles(dataFilePath, "*.csv");
                string dataLine = string.Empty;
                TblCityCouncilDistricts tblCityCouncilDistricts = new TblCityCouncilDistricts();
                TblLenders tblLenders = new TblLenders();
                TblProperties tblProperties = new TblProperties();
                TblPropertyManagementCompanies tblPropertyManagementCompanies = new TblPropertyManagementCompanies();
                TblPropertyTypes tblPropertyTypes = new TblPropertyTypes();

                conn = (SqlConnection)(Dts.Connections["DBConnection"].AcquireConnection(Dts.Transaction) as SqlConnection);

                //Read data from table or view to data table                       
                foreach (string dataFileName in dataFiles)
                {
                    System.IO.StreamReader SourceFile = new System.IO.StreamReader(dataFileName);
                    cntr = 0;
                    while ((dataLine = SourceFile.ReadLine()) != null)
                    {
                        // TODO:  Start transaction here.

                        if (cntr != 0)
                        {
                            dataLine = dataLine.Trim();

                            LoadTableObjects(dataLine, 
                                tblCityCouncilDistricts,
                                tblPropertyTypes,
                                tblLenders,
                                tblPropertyManagementCompanies,
                                tblProperties);

                            CheckCityCouncilDistrict(tblCityCouncilDistricts);

                            tblProperties.CityCouncilDistrictID = tblCityCouncilDistricts.CityCouncilDistrictID;

                            CheckPropertyType(tblPropertyTypes);

                            tblProperties.PropertyTypeID = tblPropertyTypes.PropertyTypeID;

                            CheckLender(tblLenders);

                            tblProperties.LenderID = tblLenders.LenderID;

                            CheckPropertyManagementCompany(tblPropertyManagementCompanies);

                            tblProperties.PropertyManagementCompanyID = tblPropertyManagementCompanies.PropertyManagementCompanyID;

                            // TODO:  Figure out how to handle the sproc's PropertyID output parameter with ADO.Net
                            // Try to load it directly into the tblProperties' value directly.
                            sql = "CALL spInsertTblProperties(" + 
                                "@PropertyAssessorParcelNumber, " +
                                "@PropertyTypeID, " +
                                "@PropertyStreetAddress, " +
                                "@PropertyCity, " +
                                "@PropertyState, " + 
                                "@PropertyZipCode, " +
                                "@PropertyLongitude, " +
                                "@PropertyLatitude, " +
                                "@PropertyPointOnMap, " +
                                "@CityCouncilDistrictID, " +
                                "@PropertyForeclosureRegisteredDate, " +
                                "@LenderID, " +
                                "@PropertyManagementCompanyID, " +
                                "@PropertyID);";
                            sqlCommand = new SqlCommand(sql, conn);
                            sqlCommand.Parameters.AddWithValue("@PropertyAssessorParcelNumber", tblProperties.PropertyAssessorParcelNumber);
                            sqlCommand.Parameters.AddWithValue("@PropertyTypeID", tblProperties.PropertyTypeID);
                            sqlCommand.Parameters.AddWithValue("@PropertyStreetAddress", tblProperties.PropertyStreetAddress);
                            sqlCommand.Parameters.AddWithValue("@PropertyCity", tblProperties.PropertyCity);
                            sqlCommand.Parameters.AddWithValue("@PropertyState", tblProperties.PropertyState);
                            sqlCommand.Parameters.AddWithValue("@PropertyZipCode", tblProperties.PropertyZipCode);
                            sqlCommand.Parameters.AddWithValue("@PropertyLongitude", tblProperties.PropertyLongitude);
                            sqlCommand.Parameters.AddWithValue("@PropertyLatitude", tblProperties.PropertyLatitude);
                            sqlCommand.Parameters.AddWithValue("@PropertyPointOnMap", tblProperties.PropertyPointOnMap);
                            sqlCommand.Parameters.AddWithValue("@CityCouncilDistrictID", tblProperties.CityCouncilDistrictID);
                            sqlCommand.Parameters.AddWithValue("@PropertyForeclosureRegisteredDate", tblProperties.PropertyForeclosureRegisteredDate);
                            sqlCommand.Parameters.AddWithValue("@LenderID", tblProperties.LenderID);
                            sqlCommand.Parameters.AddWithValue("@PropertyManagementCompanyID", tblProperties.PropertyManagementCompanyID);
                            sqlCommand.Parameters.AddWithValue("@PropertyID", tblProperties.PropertyID);
                            sqlCommand.ExecuteNonQuery();
                            //MessageBox.Show(sql);
                        }
                        cntr++;
                    }

                    // TODO:  Commit transaction here.
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                conn.Close();
            }
            catch (Exception ex)
            {
                // TODO:  Check for transaction here and rollback if one exists.

                // TODO:  Add current raw data file name to the exception message:
                Dts.Events.FireError(0, "Exception from Script Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void CheckCityCouncilDistrict(TblCityCouncilDistricts tblCityCouncilDistricts)
        {
            throw new NotImplementedException();
        }

        private void CheckPropertyType(TblPropertyTypes tblPropertyTypes)
        {
            throw new NotImplementedException();
        }

        private void CheckLender(TblLenders tblLenders)
        {
            throw new NotImplementedException();
        }

        private void CheckPropertyManagementCompany(TblPropertyManagementCompanies tblPropertyManagementCompanies)
        {
            throw new NotImplementedException();
        }

        private void LoadTableObjects(string dataLine, 
            TblCityCouncilDistricts tblCityCouncilDistricts,
            TblPropertyTypes tblPropertyTypes,
            TblLenders tblLenders, 
            TblPropertyManagementCompanies tblPropertyManagementCompanies, 
            TblProperties tblProperties)
        {
            string[] dataColumns = dataLine.Split(new char[] { ',' });

            tblProperties.PropertyAssessorParcelNumber = dataColumns[0].Trim();
            tblProperties.PropertyForeclosureRegisteredDate = dataColumns[1].Trim();

            tblPropertyTypes.PropertyTypeDescription = dataColumns[2].Trim();

            tblProperties.PropertyStreetAddress = dataColumns[3].Trim();
            tblProperties.PropertyCity = dataColumns[4].Trim();
            tblProperties.PropertyState = dataColumns[5].Trim();
            tblProperties.PropertyZipCode = dataColumns[6].Trim();

            tblCityCouncilDistricts.CityCouncilDistrictID = Convert.ToInt32(dataColumns[7].Trim());

            tblLenders.LenderName = dataColumns[8].Trim();
            tblLenders.LenderContact = dataColumns[9].Trim();
            tblLenders.LenderContactPhone = dataColumns[10].Trim();

            tblPropertyManagementCompanies.PropertyManagementCompanyName = dataColumns[11].Trim();
            tblPropertyManagementCompanies.PropertyManagementCompanyContact = dataColumns[12].Trim();
            tblPropertyManagementCompanies.PropertyManagementCompanyAddress = dataColumns[13].Trim();
            tblPropertyManagementCompanies.PropertyManagementCompanyContactPhone = dataColumns[14].Trim();

            tblProperties.PropertyLongitude = dataColumns[15].Trim();
            tblProperties.PropertyLatitude = dataColumns[16].Trim();
            tblProperties.PropertyPointOnMap = dataColumns[17].Trim();
        }

    }

    public class TblCityCouncilDistricts 
    {
        public int CityCouncilDistrictID = 0;
        public string CityCouncilDistrictName = string.Empty;
    }

    public class TblLenders
    {
        public int LenderID = 0;
        public string LenderName = string.Empty;
        public string LenderContact = string.Empty;
        public string LenderContactPhone = string.Empty;
    }

    public class TblProperties
    {
        public int PropertyID = 0;
        public string PropertyAssessorParcelNumber = string.Empty;
        public int PropertyTypeID = 0;
        public string PropertyStreetAddress = string.Empty;
        public string PropertyCity = string.Empty;
        public string PropertyState = string.Empty;
        public string PropertyZipCode = string.Empty;
        public string PropertyLongitude = string.Empty;
        public string PropertyLatitude = string.Empty;
        public string PropertyPointOnMap = string.Empty;
        public int CityCouncilDistrictID = 0;
        public string PropertyForeclosureRegisteredDate = string.Empty;
        public int LenderID = 0;
        public int PropertyManagementCompanyID = 0;
    }

    public class TblPropertyManagementCompanies
    {
        public int PropertyManagementCompanyID = 0;
        public string PropertyManagementCompanyName = string.Empty;
        public string PropertyManagementCompanyContact = string.Empty;
        public string PropertyManagementCompanyContactPhone = string.Empty;
        public string PropertyManagementCompanyAddress = string.Empty;
    }

    public class TblPropertyTypes
    {
        public int PropertyTypeID = 0;
        public string PropertyTypeDescription = string.Empty;
    }

}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_07e8c996ba96416f91b2b304afb84497.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_07e8c996ba96416f91b2b304afb84497.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_07e8c996ba96416f91b2b304afb84497.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_07e8c996ba96416f91b2b304afb84497.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_07e8c996ba96416f91b2b304afb84497.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_07e8c996ba96416f91b2b304afb84497</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_07e8c996ba96416f91b2b304afb84497</msb:DisplayName>
    <msb:ProjectId>{E9D6D4EE-AB06-4A5D-9B8A-23479EE9435E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_07e8c996ba96416f91b2b304afb84497.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_07e8c996ba96416f91b2b304afb84497")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_07e8c996ba96416f91b2b304afb84497")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_07e8c996ba96416f91b2b304afb84497.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D750A3DE-BE81-4703-BC2A-4C0E2DFD3870}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_07e8c996ba96416f91b2b304afb84497</RootNamespace>
    <AssemblyName>ST_07e8c996ba96416f91b2b304afb84497</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_07e8c996ba96416f91b2b304afb84497.dll">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
AAAKfRMAAAQqdgJ+FgAACn0BAAAEAnMsAAAKfQIAAAQCKC0AAAoqSgJ+FgAACn0FAAAEAiguAAAK
KqICfhYAAAp9BwAABAJ+FgAACn0IAAAEAn4WAAAKfQkAAAQCKC4AAAoqABMwAgBqAAAAAAAAAAJ+
FgAACn0LAAAEAn4WAAAKfQ0AAAQCfhYAAAp9DgAABAJ+FgAACn0PAAAEAn4WAAAKfRAAAAQCfhYA
AAp9EQAABAJ+FgAACn0SAAAEAn4WAAAKfRMAAAQCfhYAAAp9FQAABAIoLgAACirOAn4WAAAKfRkA
AAQCfhYAAAp9GgAABAJ+FgAACn0bAAAEAn4WAAAKfRwAAAQCKC4AAAoqSgJ+FgAACn0eAAAEAigu
AAAKKh4CKC4AAAoqrn4fAAAELR5yRgUAcNAIAAACKC8AAApvMAAACnMxAAAKgB8AAAR+HwAABCoa
fiAAAAQqHgKAIAAABCoafiEAAAQqHgIoMgAACioucxIAAAaAIQAABCoAQlNKQgEAAQAAAAAADAAA
AHY0LjAuMzAzMTkAAAAABQBsAAAAjAYAACN+AAD4BgAAUAoAACNTdHJpbmdzAAAAAEgRAAC4BQAA
I1VTAAAXAAAQAAAAI0dVSUQAAAAQFwAABAIAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMA
FgAAAQAAAC8AAAAKAAAAJAAAABMAAAALAAAAMgAAAAIAAAAQAAAAAgAAAAIAAAADAAAABAAAAAEA
AAAFAAAAAQAAAAEAAAAAADIFAQAAAAAABgDVAz0HBgBkBD0HBgAhAyoHDwCxBwAABgBOA84FBgC4
A84FBgCZA84FBgBLBM4FBgD1A84FBgAOBM4FBgBlA84FBgCAA58ECgApBOEECgBqAuEEDgAWBtgJ
DgDbANgJBgCoBosABgAyBmcFBgBzBWcFBgCXCWcFBgAEAyoHBgDQBl0HBgBnBqkFEgDGAhwFEgA1
AxwFEgCGApQFBgDpAj0HCgAKBeEEFgBNCL0BFgBPAb0BBgAyCosABgC7BGcFFgCPCL0BFgDgBr0B
DgDgBdgJDgAGB9gJBgADAGcFDgDRAFQGBgC1BosADgD3BVQGCgDyBuEEBgAkBmcFBgCGBmcFBgDu
CWcFBgA1AmcFBgBYAWcFBgD6Cc4FAAAAAC0AAAAAAAEAAQABABAAhAUJADkAAQABAAEAEAAYCQkA
UQAEAAgAAQAQAJsICQBRAAYACQABABAALQgJAFEACgAKAAEAEADABwkAUQAYAAsAAQAQAGAICQBR
AB0ADAAAABAAZAf+B1EAHwANAAABEACCCP4HaQAhABEAAwEAAEgJAABNACIAFAABAFoFUAABAI8F
2AABAOYA3AAGAE4A4AAGAIcBUAAGAEUA4AAGAHwBUAAGAGgJUAAGAO8BUAAGAIAA4AAGAIsGUAAG
ADYA4AAGAMgIUAAGADwKUAAGANsCUAAGABABUAAGACABUAAGADIBUAAGAHMGUAAGAE4A4AAGAKQC
UAAGAEUA4AAGAGQA4AAGAGQA4AAGAJ8BUAAGAHYJUAAGAAICUAAGAN4IUAAGADYA4AAGADwGUAAR
AHgF4wARAFoC5wARAAAB6wAGBrQA4ABWgMAI7wBWgDoC7wBQIAAAAACGAIoFBgABAOgjAAAAAIEA
ngnzAAEA6CMAAAAAgQAoAvkAAgDoIwAAAACBAMAG/wADAOgjAAAAAIEAAwoFAQQA8CMAAAAAgQAH
CQsBBQApJQAAAACGGB0HBgALAEclAAAAAIYYHQcGAAsAWiUAAAAAhhgdBwYACwCEJQAAAACGGB0H
BgALAPolAAAAAIYYHQcGAAsALiYAAAAAhhgdBwYACwBBJgAAAACDGB0HBgALAEkmAAAAAJMIzAYa
AQsAdSYAAAAAkwhCAh8BCwB8JgAAAACTCE4CJAELAIQmAAAAAJYIvQkqAQwAiyYAAAAAhhgdBwYA
DACTJgAAAACRGCMHLwEMAAAAAQAwCQAAAQBxCAAAAQCmCAAAAQDfBwAAAQDdAQAAAgAwCQAAAwBx
CAAABACmCAAABQDfBwAABgA7CAAAAQCZBAkAHQcBABEAHQcGABkAHQcKACkAHQcQADEAHQcQADkA
HQcQAEEAHQcQAEkAHQcQAFEAHQcQAFkAHQcQAGEAHQcQAGkAHQcGAKkAHQcGAMkAHQcVANkAHQcG
AHEA/wgxAOEASQg2AOkAXgU7APEAggRBAKEAuQRFAPkAVwhJAAEBSQpQAOEAiwhTAAkBXgVZAOEA
vgVBABEBBAZgAIkAHQcQAAEBbgVFAIEAHQdlAIEAsQhsABkBjARyADEBIgp6ADkB5gFFAOEAyQkB
AEEBngIGAOEAVgl+AJEAQwFFAJEA8QBFAAEBYQmEAEkBEweLAFEBHQcGAAEBtwmZAGEBAQCgAHkA
HQcGAHEAHQcGAKEAHQcGAGkBagGlAGkB9gmuALEAHQe0ANEAHQcGAAgAjADOAAgAkADTACkAcwBq
AS4ACwBCAS4AEwBLAS4AGwBqAS4AIwBzAS4AKwCcAS4AMwCcAS4AOwCcAS4AQwBzAS4ASwCiAS4A
UwCcAS4AWwC5AUMAYwDTAEkAcwBqAQMBawDTACEEewDTABsAlAAIAAEACQADAAAA0AYzAQAAYgI4
AQAAwQk9AQIADgADAAIADwAFAAEAEAAFAAIAEQAHAASAAAABAAAAaiGqkQAAAAAAAAkAAAAEAAAA
AAAAAAAAAAC8AMgAAAAAABAAAAAAAAAAAAAAAMUAwgQAAAAABAAAAAAAAAAAAAAAvAC8AAAAAAAE
AAAAAAAAAAAAAAC8AGcFAAAAABAAAAAAAAAAAAAAAMUAlQAAAAAAAAAAAAEAAABuBwAACgACAAAA
AAAAVG9JbnQzMgBTVF8wN2U4Yzk5NmJhOTY0MTZmOTFiMmIzMDRhZmI4NDQ5NwA8TW9kdWxlPgBQ
cm9wZXJ0eVR5cGVJRABMZW5kZXJJRABDaXR5Q291bmNpbERpc3RyaWN0SUQAUHJvcGVydHlNYW5h
Z2VtZW50Q29tcGFueUlEAFByb3BlcnR5SUQAU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
TWFuYWdlZERUUwB2YWx1ZV9fAFN5c3RlbS5EYXRhAG1zY29ybGliAERiQ29tbWFuZABTcWxDb21t
YW5kAHNxbENvbW1hbmQAZ2V0X1N0YWNrVHJhY2UAZGVmYXVsdEluc3RhbmNlAFByb3BlcnR5Wmlw
Q29kZQBQcm9wZXJ0eUxvbmdpdHVkZQBQcm9wZXJ0eUxhdGl0dWRlAGdldF9NZXNzYWdlAFZhcmlh
YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAExlbmRlck5hbWUAQ2l0eUNv
dW5jaWxEaXN0cmljdE5hbWUAUHJvcGVydHlNYW5hZ2VtZW50Q29tcGFueU5hbWUATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuUnVudGltZQBkYXRhTGluZQBSZWFkTGluZQBMZW5kZXJDb250YWN0UGhv
bmUAUHJvcGVydHlNYW5hZ2VtZW50Q29tcGFueUNvbnRhY3RQaG9uZQBDaGVja1Byb3BlcnR5VHlw
ZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRT
Y3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UAUHJvcGVy
dHlGb3JlY2xvc3VyZVJlZ2lzdGVyZWREYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAFByb3BlcnR5
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJp
YnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJs
eVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29y
a0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw
dGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJv
ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0Vu
dHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRp
YmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBBZGRXaXRoVmFsdWUAdmFsdWUAU3lzdGVtLlJ1bnRp
bWUuVmVyc2lvbmluZwBUb1N0cmluZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMDdlOGM5OTZiYTk2NDE2ZjkxYjJiMzA0YWZiODQ0OTcu
ZGxsAHNxbABnZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4A
Y29ubgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNh
Y3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsUGFyYW1ldGVyQ29sbGVjdGlvbgBEYkNvbm5lY3Rp
b24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlv
bgBQcm9wZXJ0eVR5cGVEZXNjcmlwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8A
UHJvcGVydHlQb2ludE9uTWFwAENoYXIAUHJvcGVydHlBc3Nlc3NvclBhcmNlbE51bWJlcgBTdHJl
YW1SZWFkZXIAVGV4dFJlYWRlcgBDaGVja0xlbmRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5l
Y3Rpb25NYW5hZ2VyAEV2ZW50c09iamVjdFdyYXBwZXIAU3FsUGFyYW1ldGVyAEZpcmVFcnJvcgAu
Y3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8wN2U4Yzk5NmJhOTY0MTZmOTFiMmIzMDRhZmI4NDQ5
Ny5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAVGJsUHJvcGVy
dHlNYW5hZ2VtZW50Q29tcGFuaWVzAHRibFByb3BlcnR5TWFuYWdlbWVudENvbXBhbmllcwBTVF8w
N2U4Yzk5NmJhOTY0MTZmOTFiMmIzMDRhZmI4NDQ5Ny5Qcm9wZXJ0aWVzAFRibFByb3BlcnRpZXMA
dGJsUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEdldEZpbGVzAFRibFByb3BlcnR5VHlwZXMAdGJs
UHJvcGVydHlUeXBlcwBTZXR0aW5ncwBnZXRfQ29ubmVjdGlvbnMAVGJsTGVuZGVycwB0YmxMZW5k
ZXJzAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAUHJvcGVydHlTdHJlZXRBZGRyZXNzAFByb3BlcnR5
TWFuYWdlbWVudENvbXBhbnlBZGRyZXNzAGdldF9EdHMATG9hZFRhYmxlT2JqZWN0cwBUYmxDaXR5
Q291bmNpbERpc3RyaWN0cwB0YmxDaXR5Q291bmNpbERpc3RyaWN0cwBTY3JpcHRSZXN1bHRzAGdl
dF9FdmVudHMAQ29uY2F0AExlbmRlckNvbnRhY3QAUHJvcGVydHlNYW5hZ2VtZW50Q29tcGFueUNv
bnRhY3QAT2JqZWN0AENoZWNrQ2l0eUNvdW5jaWxEaXN0cmljdABTcGxpdABnZXRfRGVmYXVsdABz
ZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAQ29udmVydABnZXRfQXNzZW1ibHkA
Q2hlY2tQcm9wZXJ0eU1hbmFnZW1lbnRDb21wYW55AEV4ZWN1dGVOb25RdWVyeQBEaXJlY3RvcnkA
UHJvcGVydHlDaXR5AEVtcHR5AAAAK1UAcwBlAHIAOgA6AFIAYQB3AEQAYQB0AGEARgBpAGwAZQBw
AGEAdABoAAALKgAuAGMAcwB2AAAZRABCAEMAbwBuAG4AZQBjAHQAaQBvAG4AAIKFQwBBAEwATAAg
AHMAcABJAG4AcwBlAHIAdABUAGIAbABQAHIAbwBwAGUAcgB0AGkAZQBzACgAQABQAHIAbwBwAGUA
cgB0AHkAQQBzAHMAZQBzAHMAbwByAFAAYQByAGMAZQBsAE4AdQBtAGIAZQByACwAIABAAFAAcgBv
AHAAZQByAHQAeQBUAHkAcABlAEkARAAsACAAQABQAHIAbwBwAGUAcgB0AHkAUwB0AHIAZQBlAHQA
QQBkAGQAcgBlAHMAcwAsACAAQABQAHIAbwBwAGUAcgB0AHkAQwBpAHQAeQAsACAAQABQAHIAbwBw
AGUAcgB0AHkAUwB0AGEAdABlACwAIABAAFAAcgBvAHAAZQByAHQAeQBaAGkAcABDAG8AZABlACwA
IABAAFAAcgBvAHAAZQByAHQAeQBMAG8AbgBnAGkAdAB1AGQAZQAsACAAQABQAHIAbwBwAGUAcgB0
AHkATABhAHQAaQB0AHUAZABlACwAIABAAFAAcgBvAHAAZQByAHQAeQBQAG8AaQBuAHQATwBuAE0A
YQBwACwAIABAAEMAaQB0AHkAQwBvAHUAbgBjAGkAbABEAGkAcwB0AHIAaQBjAHQASQBEACwAIABA
AFAAcgBvAHAAZQByAHQAeQBGAG8AcgBlAGMAbABvAHMAdQByAGUAUgBlAGcAaQBzAHQAZQByAGUA
ZABEAGEAdABlACwAIABAAEwAZQBuAGQAZQByAEkARAAsACAAQABQAHIAbwBwAGUAcgB0AHkATQBh
AG4AYQBnAGUAbQBlAG4AdABDAG8AbQBwAGEAbgB5AEkARAAsACAAQABQAHIAbwBwAGUAcgB0AHkA
SQBEACkAOwAAO0AAUAByAG8AcABlAHIAdAB5AEEAcwBzAGUAcwBzAG8AcgBQAGEAcgBjAGUAbABO
AHUAbQBiAGUAcgAAH0AAUAByAG8AcABlAHIAdAB5AFQAeQBwAGUASQBEAAAtQABQAHIAbwBwAGUA
cgB0AHkAUwB0AHIAZQBlAHQAQQBkAGQAcgBlAHMAcwAAG0AAUAByAG8AcABlAHIAdAB5AEMAaQB0
AHkAAB1AAFAAcgBvAHAAZQByAHQAeQBTAHQAYQB0AGUAACFAAFAAcgBvAHAAZQByAHQAeQBaAGkA
cABDAG8AZABlAAAlQABQAHIAbwBwAGUAcgB0AHkATABvAG4AZwBpAHQAdQBkAGUAACNAAFAAcgBv
AHAAZQByAHQAeQBMAGEAdABpAHQAdQBkAGUAACdAAFAAcgBvAHAAZQByAHQAeQBQAG8AaQBuAHQA
TwBuAE0AYQBwAAAtQABDAGkAdAB5AEMAbwB1AG4AYwBpAGwARABpAHMAdAByAGkAYwB0AEkARAAA
RUAAUAByAG8AcABlAHIAdAB5AEYAbwByAGUAYwBsAG8AcwB1AHIAZQBSAGUAZwBpAHMAdABlAHIA
ZQBkAEQAYQB0AGUAABNAAEwAZQBuAGQAZQByAEkARAAAOUAAUAByAG8AcABlAHIAdAB5AE0AYQBu
AGEAZwBlAG0AZQBuAHQAQwBvAG0AcABhAG4AeQBJAEQAABdAAFAAcgBvAHAAZQByAHQAeQBJAEQA
ADVFAHgAYwBlAHAAdABpAG8AbgAgAGYAcgBvAG0AIABTAGMAcgBpAHAAdAAgAFQAYQBzAGsAAAMN
AABxUwBUAF8AMAA3AGUAOABjADkAOQA2AGIAYQA5ADYANAAxADYAZgA5ADEAYgAyAGIAMwAwADQA
YQBmAGIAOAA0ADQAOQA3AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AABbGfmU2rL7RYxxbS6alzYjAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFhFQcLCA4SDBIQEhQS
GBIcHQ4IEkUSSQQgABJxBCAAEnUFIAESeRwDIAAcAyAADgYAAh0ODg4CBg4FIAASgIUGIAESgIkc
BCABHBwGIAIBDhI9BSAAEoCNByACEoCRDhwDIAAIBSAAEoClBgADDg4ODgggBQIIDg4OCAQHAR0O
BiABHQ4dAwQAAQgOCAABEoC1EYC5BSAAEoC9ByACAQ4SgL0It3pcVhk04IkIiYRdzYCAzJEEAAAA
AAQBAAAAAwYSPQMGEkECBggDBhJZAwYSXQMGEiQDBhEoBSABARIMBSABARIcBSABARIQBSABARIY
DiAGAQ4SDBIcEhASGBIUBAAAElkEAAASXQUAAQESXQQAABIkAwAAAQQIABJZBAgAEl0ECAASJAgB
AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMDdl
OGM5OTZiYTk2NDE2ZjkxYjJiMzA0YWZiODQ0OTcAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAy
MwAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
ZRIuTkVUIEZyYW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJl
c291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWws
IFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1l
UmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAJRAAAAAAAAAAAAAAK5AAAAAIAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACgQAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAA
AAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAA
ABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQCqkWohAAABAKqRaiE/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADAANwBlADgAYwA5ADkANgBiAGEAOQA2ADQAMQA2AGYAOQAxAGIAMgBiADMAMAA0AGEAZgBiADgA
NAA0ADkANwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADUANQA0
AC4AMwA3ADIAOQAwAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADAA
NwBlADgAYwA5ADkANgBiAGEAOQA2ADQAMQA2AGYAOQAxAGIAMgBiADMAMAA0AGEAZgBiADgANAA0
ADkANwAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAA
eQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAzAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBt
AGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AMAA3AGUAOABjADkAOQA2AGIAYQA5ADYANAAxADYAZgA5ADEAYgAyAGIAMwAwADQAYQBm
AGIAOAA0ADQAOQA3AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADAANwBlADgAYwA5ADkANgBiAGEAOQA2ADQAMQA2AGYAOQAxAGIAMgBiADMAMAA0AGEAZgBi
ADgANAA0ADkANwAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
OAA1ADUANAAuADMANwAyADkAMAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOAA1ADUANAAuADMANwAyADkAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADAMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="149.6,41.6"
          Id="Package\Load Raw Data"
          TopLeft="25.8333319218623,25.9999998191993" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>